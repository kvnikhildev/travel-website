pipeline {
    agent any

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/kvnikhildev/travel-website.git'
            }
        }
        stage('Build') {
            steps {
            
                 sh 'docker build -t travel-website .'    

                }
            }
        stage('Test') {
            steps {
                script {
                  
                  sh 'docker run --rm -v $PWD/output:/app/output travel-website sh -c "pytest --cov=. --cov-report=xml:/app/output/coverage.xml --junitxml=/app/output/pytest_results.xml"'
  
                  // Publish test results in Jenkins UI
                  junit 'output/pytest_results.xml'
                  sh 'docker run --rm -v $PWD/output:/app/output travel-website sh -c "pylint app.py > /app/output/pylint_results.txt" || true'
                  sh 'docker run --rm -v $PWD/output:/app/output travel-website bandit -r . -f txt -o /app/output/bandit-report.txt || true'
                  // Archive analysis reports
                  archiveArtifacts artifacts: 'output/pylint_results.txt, output/bandit-report.txt', fingerprint: true

                }   
            }
        }
        stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.50.240:9000"
           }
      steps {
        withCredentials([string(credentialsId: 'sonar_token', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
               docker run --rm --network=host -e SONAR_HOST_URL=$SONAR_URL -e SONAR_TOKEN=$SONAR_AUTH_TOKEN -v $PWD:/usr/src \
               sonarsource/sonar-scanner-cli \
               -Dsonar.projectKey=travel-website \
               -Dsonar.sources=. \
               -Dsonar.language=py \
               -Dsonar.python.coverage.reportPaths=coverage.xml 
            '''
        }
      }
    }
    stage('push to docker hub') {
        environment {
            DOCKER_IMAGE = "kvnikhill/travel-website:${BUILD_NUMBER}"
            REGISTRY_CREDENTIALS = credentials('docker-hub')
        }
        steps {
            script {
                sh 'docker build -t ${DOCKER_IMAGE} .'
                def dockerImage = docker.image("${DOCKER_IMAGE}")
                docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                    dockerImage.push()
                } 
            }
        }
    }
    stage('Push deployment.yaml to GitHub') {
    environment {
        GIT_REPO = 'kvnikhildev/travel-website.git'
        GIT_BRANCH = 'main'

         }
      steps {
        withCredentials([string(credentialsId: 'github-credentials', variable: 'GIT_TOKEN')]) {
            sh """
                git config --global user.email "kvnihkill@gmail.com"
                ls
                ls -l k8/
                git config --global user.name "kvnikhildev"
                cp k8/Deployment_templete.yml k8/Deployment.yml
                sed -i "s/replaceWithYourImage/${BUILD_NUMBER}/g" k8/Deployment.yml 
                git add k8/Deployment.yml
                git commit -m "Update deployment.yaml from Jenkins Build #$BUILD_NUMBER"
                git push https://github.com/${GIT_REPO} HEAD:${GIT_BRANCH}
            """
             }
          }
        }
   }
}